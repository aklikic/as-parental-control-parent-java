// This is the public API offered by your entity.
syntax = "proto3";

import "google/protobuf/empty.proto";
import "akkaserverless/annotations.proto";
import "google/api/annotations.proto";
import "google/protobuf/any.proto";
import "persistence/pc_parent_domain.proto";

package com.lightbend.gsa.parentalcontrol.parent.view;

option go_package = "com/lightbend/gsa/parentalcontrol/parent/view";

message GetAllParentsRequest{
}

message ParentAllView{
    string parent_id = 1;
    string name = 2;
}

service ParentAll {
    //option (akkaserverless.service).entity.type = ".persistence.ParentEntity";
    rpc ProcessParentCreated(com.lightbend.gsa.parentalcontrol.parent.persistence.ParentCreated) returns (ParentAllView) {
        option (akkaserverless.method).eventing.in = {
            event_sourced_entity: "ParentEntity"
        };
        option (akkaserverless.method).view.update = {
            table: "parent"
            transform_updates: true
        };
    }

    rpc ProcessParentUpdated(com.lightbend.gsa.parentalcontrol.parent.persistence.ParentUpdated) returns (ParentAllView) {
        option (akkaserverless.method).eventing.in = {
            event_sourced_entity: "ParentEntity"
        };
        option (akkaserverless.method).view.update = {
            table: "parent"
            transform_updates: true
        };
    }

    // handle other events which are not managed above
    rpc CatchOthers(google.protobuf.Any) returns (google.protobuf.Empty) {
        option (akkaserverless.method).eventing.in = {
            event_sourced_entity:  "ParentEntity"
        };
    }

    rpc GetParents(GetAllParentsRequest) returns (stream ParentAllView) {
        option (akkaserverless.method).view.query = {
            query: "SELECT * FROM parent"
        };
        option (google.api.http) = {
            get: "/parental-control/parents-all"
        };
    }
}
